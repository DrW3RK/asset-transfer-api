import type { ApiPromise } from '@polkadot/api';

import { AssetsTransferAPI } from './AssetsTransferAPI';
import { mockSystemApi } from './testHelpers/mockSystemApi';
import { Format } from './types';

const getSystemRuntimeVersion = () =>
	Promise.resolve().then(() => {
		return {
			specName: mockSystemApi.registry.createType('Text', 'statemint'),
			specVersion: mockSystemApi.registry.createType('u32', 1000),
		};
	});

const adjustedMockSystemApi = {
	registry: mockSystemApi.registry,
	rpc: {
		state: {
			getRuntimeVersion: getSystemRuntimeVersion,
		},
	},
	// Needed when checking what direction this is.
	query: {},
	tx: {
		polkadotXcm: {
			limitedReserveTransferAssets:
				mockSystemApi.tx['polkadotXcm'].limitedReserveTransferAssets,
			reserveTransferAssets:
				mockSystemApi.tx['polkadotXcm'].reserveTransferAssets,
		},
	},
} as unknown as ApiPromise;

const systemAssetsApi = new AssetsTransferAPI(adjustedMockSystemApi);

describe('AssetTransferApi', () => {
	describe('createTransferTransaction', () => {
		describe('SystemToPara', () => {
			const baseCreateTx = async (
				format: Format,
				isLimited: boolean,
				xcmVersion: number
			) => {
				return await systemAssetsApi.createTransferTransaction(
					'2000', // Since this is not `0` we know this is to a parachain
					'0xf5d5714c084c112843aca74f8c498da06cc5a2d63153b825189baa51043b1f0b',
					['1', '2'],
					['100', '100'],
					{
						format,
						isLimited,
						xcmVersion,
					}
				);
			};
			describe('V0', () => {
				it('Should correctly build a call for a limitedReserveTransferAsset for V0', async () => {
					const res = await baseCreateTx('call', true, 0);
					expect(res).toEqual(
						'0x1f0800010200f5d5714c084c112843aca74f8c498da06cc5a2d63153b825189baa51043b1f0b000101411f00080a020532060491010a020532060891010000000000'
					);
				});
				it('Should correctly build a payload for a limitedReserveTransferAsset for V0', async () => {
					const res = await baseCreateTx('payload', true, 0);
					expect(res).toEqual(
						'0x4d077b2263616c6c496e646578223a22307831663038222c2261726773223a7b2264657374223a7b227630223a7b227831223a7b226163636f756e7449643332223a7b226e6574776f726b223a7b22616e79223a6e756c6c7d2c226964223a22307866356435373134633038346331313238343361636137346638633439386461303663633561326436333135336238323531383962616135313034336231663062227d7d7d7d2c2262656e6566696369617279223a7b227630223a7b227831223a7b2270617261636861696e223a323030307d7d7d2c22617373657473223a7b227630223a5b7b22636f6e637265746546756e6769626c65223a7b226964223a7b227832223a5b7b2270616c6c6574496e7374616e6365223a35307d2c7b2267656e6572616c496e646578223a317d5d7d2c22616d6f756e74223a3130307d7d2c7b22636f6e637265746546756e6769626c65223a7b226964223a7b227832223a5b7b2270616c6c6574496e7374616e6365223a35307d2c7b2267656e6572616c496e646578223a327d5d7d2c22616d6f756e74223a3130307d7d5d7d2c226665655f61737365745f6974656d223a302c227765696768745f6c696d6974223a7b22756e6c696d69746564223a6e756c6c7d7d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
					);
				});
				it('Should correctly build a call for a reserveTransferAsset for V0', async () => {
					const res = await baseCreateTx('call', false, 0);
					expect(res).toEqual(
						'0x1f0200010200f5d5714c084c112843aca74f8c498da06cc5a2d63153b825189baa51043b1f0b000101411f00080a020532060491010a0205320608910100000000'
					);
				});
				it('Should correctly build a payload for a reserveTransferAsset for V0', async () => {
					const res = await baseCreateTx('payload', false, 0);
					expect(res).toEqual(
						'0xc5067b2263616c6c496e646578223a22307831663032222c2261726773223a7b2264657374223a7b227630223a7b227831223a7b226163636f756e7449643332223a7b226e6574776f726b223a7b22616e79223a6e756c6c7d2c226964223a22307866356435373134633038346331313238343361636137346638633439386461303663633561326436333135336238323531383962616135313034336231663062227d7d7d7d2c2262656e6566696369617279223a7b227630223a7b227831223a7b2270617261636861696e223a323030307d7d7d2c22617373657473223a7b227630223a5b7b22636f6e637265746546756e6769626c65223a7b226964223a7b227832223a5b7b2270616c6c6574496e7374616e6365223a35307d2c7b2267656e6572616c496e646578223a317d5d7d2c22616d6f756e74223a3130307d7d2c7b22636f6e637265746546756e6769626c65223a7b226964223a7b227832223a5b7b2270616c6c6574496e7374616e6365223a35307d2c7b2267656e6572616c496e646578223a327d5d7d2c22616d6f756e74223a3130307d7d5d7d2c226665655f61737365745f6974656d223a307d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
					);
				});
			});
			describe('V1', () => {
				it('Should correctly build a call for a limitedReserveTransferAsset for V1', async () => {
					const res = await baseCreateTx('call', true, 1);
					expect(res).toEqual(
						'0x1f080100010100f5d5714c084c112843aca74f8c498da06cc5a2d63153b825189baa51043b1f0b01010100411f010800000204320504009101000002043205080091010000000000'
					);
				});
				it('Should correctly build a payload for a limitedReserveTransferAsset for V1', async () => {
					const res = await baseCreateTx('payload', true, 1);
					expect(res).toEqual(
						'0xed087b2263616c6c496e646578223a22307831663038222c2261726773223a7b2264657374223a7b227631223a7b22706172656e7473223a302c22696e746572696f72223a7b227831223a7b226163636f756e7449643332223a7b226e6574776f726b223a7b22616e79223a6e756c6c7d2c226964223a22307866356435373134633038346331313238343361636137346638633439386461303663633561326436333135336238323531383962616135313034336231663062227d7d7d7d7d2c2262656e6566696369617279223a7b227631223a7b22706172656e7473223a312c22696e746572696f72223a7b227831223a7b2270617261636861696e223a323030307d7d7d7d2c22617373657473223a7b227631223a5b7b226964223a7b22636f6e6372657465223a7b22706172656e7473223a302c22696e746572696f72223a7b227832223a5b7b2270616c6c6574496e7374616e6365223a35307d2c7b2267656e6572616c496e646578223a317d5d7d7d7d2c2266756e223a7b2266756e6769626c65223a3130307d7d2c7b226964223a7b22636f6e6372657465223a7b22706172656e7473223a302c22696e746572696f72223a7b227832223a5b7b2270616c6c6574496e7374616e6365223a35307d2c7b2267656e6572616c496e646578223a327d5d7d7d7d2c2266756e223a7b2266756e6769626c65223a3130307d7d5d7d2c226665655f61737365745f6974656d223a302c227765696768745f6c696d6974223a7b22756e6c696d69746564223a6e756c6c7d7d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
					);
				});
				it('Should correctly build a call for a reserveTransferAsset for V1', async () => {
					const res = await baseCreateTx('call', false, 1);
					expect(res).toEqual(
						'0x1f020100010100f5d5714c084c112843aca74f8c498da06cc5a2d63153b825189baa51043b1f0b01010100411f0108000002043205040091010000020432050800910100000000'
					);
				});
				it('Should correctly build a payload for a reserveTransferAsset for V1', async () => {
					const res = await baseCreateTx('payload', false, 1);
					expect(res).toEqual(
						'0x65087b2263616c6c496e646578223a22307831663032222c2261726773223a7b2264657374223a7b227631223a7b22706172656e7473223a302c22696e746572696f72223a7b227831223a7b226163636f756e7449643332223a7b226e6574776f726b223a7b22616e79223a6e756c6c7d2c226964223a22307866356435373134633038346331313238343361636137346638633439386461303663633561326436333135336238323531383962616135313034336231663062227d7d7d7d7d2c2262656e6566696369617279223a7b227631223a7b22706172656e7473223a312c22696e746572696f72223a7b227831223a7b2270617261636861696e223a323030307d7d7d7d2c22617373657473223a7b227631223a5b7b226964223a7b22636f6e6372657465223a7b22706172656e7473223a302c22696e746572696f72223a7b227832223a5b7b2270616c6c6574496e7374616e6365223a35307d2c7b2267656e6572616c496e646578223a317d5d7d7d7d2c2266756e223a7b2266756e6769626c65223a3130307d7d2c7b226964223a7b22636f6e6372657465223a7b22706172656e7473223a302c22696e746572696f72223a7b227832223a5b7b2270616c6c6574496e7374616e6365223a35307d2c7b2267656e6572616c496e646578223a327d5d7d7d7d2c2266756e223a7b2266756e6769626c65223a3130307d7d5d7d2c226665655f61737365745f6974656d223a307d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
					);
				});
			});
		});
	});
});
